Flow control statements: for, if, else, switch and defer
Learn how to control the flow of your code with conditionals, loops, switches and defers.

The Go Authors
https://golang.org

* For

ภาษาโกมีวิธีวนลูปแบบเดียวคือ `for`

การใช้ `for` แบบพื้นฐานคือใส่ค่าส่วนประกอบสามค่าลงไป แบ่งวรรคแต่ละค่าด้วย เซมิโคลอน:

- ส่วนกำหนดค่าเริ่มต้น: ถูกทำก่อนเริ่มวนรอบแรก
- ส่วนกำหนดเงื่อนไข: จะถูกคำนวณก่อนจะเริ่มทุกๆรอบ
- ส่วนที่ทำทีหลัง: จะถูกทำทุกครั้งหลังจบแต่ละรอบ

ขั้นตอนของ ส่วนกำหนดค่าเริ่มต้น ส่วนมากจะเป็นการประกาศตัวแปรแบบย่อ
และตัวแปรที่ถูกประกาศจะใช้ได้แค่ในขอบเขตของ `for` นี้เท่านั้น

ลูปจะหยุดเมื่อค่านิพจน์จาก ส่วนกำหนดเงื่อนไข ถูกคำนวณว่าได้ค่า `false`

_โปรดจำไว้ว่า_: สิ่งที่ต่างจากภาษาอื่นๆอย่าง ภาษาซี, จาวา หรือ จาวาสคริป ก็คือมันไม่มีวงเล็บ
ครอบค่าส่วนประกอบสามค่าของ `for` และวงเล็บปีกกา `{`}` จะต้องมีเสมอ

.play flowcontrol/for.go

* For (ต่อ)

ส่วนของการ กำหนดค่าเริ่มต้น และ ส่วนที่ทำทีหลัง นั้นจะมีหรือไม่มีก็ได้

.play flowcontrol/for-continued.go

* For คือ "while" ในภาษาโก

ไม่ยากเลย แค่เอาเซมิโคลอนออกไป หรือจะพูดง่ายๆคือ `while` ของภาษาซี สะกดว่า `for` ในภาษาโกก็ได้

.play flowcontrol/for-is-gos-while.go

* ทำซ้ำแบบอนันต์

ถ้าคุณละการกำหนดเงื่อนไข มันจะกลายเป็นทำซ้ำไปเรื่อยๆ และมันดูกระทัดรัดมาก

.play flowcontrol/forever.go

* If

`if` ในภาษาโก ก็คล้ายกับ `for` ลูป ที่ไม่ต้องมีวงเล็บครอบ `(`)` แต่ปีกกาต้องมีเสมอ `{`}`

.play flowcontrol/if.go

* If แบบย่อ

เช่นเดียวกับ `for` การประกาศ `if` สามารถเริ่มด้วยคำสั่งบางอย่างก่อนที่จะถามเงื่อนไข

ตัวแปรที่ประกาศภายในนี้ก็จะใช้ได้ภายในขอบเขตของ `if` นี้เท่านั้น

(ทดลองเอา `v` ไปไว้ในส่วนของ `return` ที่ตอบจบของฟังก์ชั่นแทนดู)

.play flowcontrol/if-with-a-short-statement.go

* If และ else

ตัวแปรที่ประกาศไว้สั้นๆภายใน `if` ยังสามารถใช้ได้ในส่วนของ `else` ทั้งหมดได้ด้วย

(ในฟังก์ชั่น `main` ทั้งสองบรรทัดเรียกใช้ฟังก์ชั่น `pow` และคืนค่ามาก่อนที่จะเรียกฟังก์ชั่น `fmt.Println` ต่อ)

.play flowcontrol/if-and-else.go

* แบบฝึกหัด: ลูป และ ฟังก์ชั่น

วิธีง่ายๆที่จะเล่นกับฟังก์ชั่นและลูป คือการสร้างฟังก์ชั่นหาค่า รากที่สอง โดยใช้ วิธีของนิวตัน

ในกรณีนี้ วิธีของนิวตัน คือการหาค่าที่ใกล้เคียง `Sqrt(x)` แล้วเลือกค่าเริ่มต้นมาค่าหนึ่ง สมมุติว่าเป็น _z_ แล้วทำซ้ำไปเรื่อยๆ:

.image /content/img/newton.png

เบื้องต้นให้ทำซ้ำ 10 ครั้งแล้วดูว่าค่าไหนที่ใกล้เคียงกับคำตอบมากที่สุดในบรรดาค่าที่ (1, 2, 3, ...)

จากนั้น เปลี่ยนเงื่อนไขในการหยุด ให้หยุดเมื่อค่าที่ได้ไม่มีการเปลี่ยนแปลงอีกต่อไป (หรือเปลี่ยนแปลงน้อยมาก) ให้ดูว่ามันทำซ้ำมากหรือน้อยรอบ กว่าที่คำตอบจะใกล้เคียงกับที่ได้จาก [[https://golang.org/pkg/math/#Sqrt][math.Sqrt]]?

คำแนะนำ: สร้างตัวแปรและกำหนดค่าเบื้องต้นด้วยเลขทศนิยม หรือใช้การแปลงค่าแบบนี้:

	z := float64(1)
	z := 1.0

.play flowcontrol/exercise-loops-and-functions.go

* Switch

คุณอาจจะรู้อยู่แล้วว่า `switch` เป็นอย่างไร

ทุกๆส่วนของเงื่อนไข จะหยุดทำโดยอัตโนมัติ เว้นแต่ว่าจะใส่คำเฉพาะ `fallthrough` ไปที่ตอนจบของส่วนนั้นๆ

.play flowcontrol/switch.go

* Switch ทำตามลำดับ

Switch จะค้นหาเงื่อนไขแต่ละส่วนจากบนลงล่าง และจะหยุดเมื่อส่วนใดส่วนหนึ่งทำสำเร็จ

(ตัวอย่างเช่น,

	switch i {
	case 0:
	case f():
	}

ฟังก์ชั่น `f` จะไม่ถูกเรียกใช้เลย ถ้า `i==0` เป็นจริง)

#appengine: *โปรดจำไว้ว่า:* เวลาใน playground ของภาษาโกจะเริ่มต้นที่
#appengine: 2009-11-10 23:00:00 UTC เสมอ ซึ่งเป็นค่าที่กำหนดไว้สำหรับ
#appengine: ให้ผู้อ่านใช้ทำแบบฝึกหัด

.play flowcontrol/switch-evaluation-order.go

* Switch แบบไม่มีเงื่อนไข

Switch แบบไม่มีเงื่อนไขก็เหมือนกับ `switch`true`

รูปแบบนี้เหมาะจะใช้แทนการมี if-then-else ต่อกันหลายๆทอด

.play flowcontrol/switch-with-no-condition.go

* Defer

คำสั่ง defer จะหน่วงการเรียกใช้ฟังก์ชั่นที่ระบุไว้ จนกว่าฟังก์ชั่นที่ครอบมันอยู่ทำงานเสร็จสิ้นจนกระทั้งคืนค่าแล้ว

อาร์กิวเมนต์ของฟังก์ชั่นที่ถูกหน่วงไว้ จะถูกประเมิณค่าทันที เพียงแต่ตัวฟังก์ชั่นจะยังไม่ถูกเรียกจนกว่าฟังก์ชั่นที่ครอบมันอยู่จะคืนค่าออกไปก่อน

.play flowcontrol/defer.go

* การ defer เป็นชั้นๆ

ฟังก์ชั่นที่ถูกหน่วงจะถูกใส่ลงไปกองซ้อนกันไว้ก่อนเป็นชั้นๆ และเมื่อใดที่ฟังก์ชั่นที่ครอบมันอยู่ คืนค่ากลับ
บรรดาฟังก์ชั่นที่ถูกหน่วงไว้จะถูกหยิบมาเรียกทีละตัวแบบ last-in-first-out คือตัวสุดท้ายจะถูกทำก่อนนั่นเอง

หากต้องการรู้เกี่ยวกับ defer เพิ่มเติม ให้อ่านที่นี่
[[https://blog.golang.org/defer-panic-and-recover][blog post]]

.play flowcontrol/defer-multi.go

* ยินดีด้วย!

คุณได้จบบทนี้แล้ว!

คุณสามารถย้อนกลับไปดูรายการทั้งหมดของ [[/list][modules]] เพื่อดูว่าจะเรียนอะไรต่อไป หรือไปต่อที่ [[javascript:click('.next-page')][บทต่อไป]]
